# -*- mode: ruby -*-
# vi: set ft=ruby :

$pkg_name = ENV['PKG_NAME'] || Dir["../strong-pm-*.tgz"].last
$node_version = ENV['NODE_VER'] || "0.10.38"
$NODE_URL = "http://nodejs.org/dist/v#{$node_version}/node-v#{$node_version}-linux-x64.tar.gz"
npm_config_registry = ENV['npm_config_registry'] ||
                      `npm config get registry`.strip ||
                      'https://registry.npmjs.org/'
$NPM_REGISTRY = "--registry #{npm_config_registry}"

$bootstrap = <<SCRIPT
  test -f bootstrapped.txt && exit
  # apt-get update -y -qq
  apt-get install -y -qq build-essential git curl vim
  mkdir -p ~/.ssh; ssh-keyscan github.com >> ~/.ssh/known_hosts
  touch bootstrapped.txt
SCRIPT

$setup = <<SCRIPT
  rm -rf /usr/local/lib/node_modules
  curl -s #{$NODE_URL} | tar -C /usr/local --strip-components 1 -xzf -
  chown -R vagrant /usr/local
SCRIPT

$test = <<SCRIPT
  mkdir -p ~/.ssh; ssh-keyscan github.com >> ~/.ssh/known_hosts
  npm install -g node-gyp > /dev/null
  node-gyp install &> /dev/null
  function report() {
    echo "# $*..."
    ($* && echo "ok # $*") || (echo "not ok # $*" >&2)
    ## ($* > /dev/null && echo "ok # $*") || (echo "not ok # $*" >&2)
  }
  report npm install #{$NPM_REGISTRY} -g strong-pm.tgz
  report sudo sl-pm-install --port 8701 --set-env SL_PM_VAGRANT=42
  report test -f /etc/init/strong-pm.conf
  report sudo start strong-pm
  report sudo status strong-pm
  sleep 5
  sudo tail -20 /var/log/upstart/strong-pm.log
SCRIPT

Vagrant.configure("2") do |config|

  # Ubuntu 14.04 is a reasonable starting point
  config.vm.box = "ubuntu/trusty64"

  # used for installing npm packages from private repos
  config.ssh.forward_agent = true

  # Ideally this part would be cached
  config.vm.provision "shell", inline: $bootstrap, privileged: true

  # Clear the environment and reset the state of Node
  config.vm.provision "shell", inline: $setup, privileged: true

  # The module under test
  unless $pkg_name.nil?
    config.vm.provision "file", source: $pkg_name, destination: "strong-pm.tgz"
  end

  # Install modules for tests
  config.vm.provision "shell", inline: $test, privileged: false

  # expose manager's port
  config.vm.network "forwarded_port", guest: 8701, host: 8702
  # expose sample app's port
  config.vm.network "forwarded_port", guest: 3001, host: 8889

end
